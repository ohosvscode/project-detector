name: CI
env:
  DEBUG: napi:*
  APP_NAME: project-detector
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  CARGO_INCREMENTAL: '1'
permissions:
  contents: write
  id-token: write
'on':
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  lint:
    name: Lint
    runs-on: [self-hosted, macos]
    steps:
      - uses: actions/checkout@v5
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      - name: Install dependencies
        run: pnpm install
      - name: ESLint
        run: pnpm lint
      - name: Cargo fmt
        run: cargo fmt -- --check
      - name: Clippy
        run: cargo clippy

  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: [self-hosted, macos]
            target: x86_64-apple-darwin
            build: pnpm build --target x86_64-apple-darwin
          - host: [self-hosted, windows, x64]
            build: pnpm build --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - host: [self-hosted, windows, x64]
            build: pnpm build --target i686-pc-windows-msvc
            target: i686-pc-windows-msvc
          - host: [self-hosted, linux]
            target: x86_64-unknown-linux-gnu
            build: pnpm build --target x86_64-unknown-linux-gnu --use-napi-cross
          - host: [self-hosted, linux]
            target: x86_64-unknown-linux-musl
            build: pnpm build --target x86_64-unknown-linux-musl -x
          - host: [self-hosted, macos]
            target: aarch64-apple-darwin
            build: pnpm build --target aarch64-apple-darwin
          - host: [self-hosted, linux]
            target: aarch64-unknown-linux-gnu
            build: pnpm build --target aarch64-unknown-linux-gnu --use-napi-cross
          - host: [self-hosted, linux]
            target: armv7-unknown-linux-gnueabihf
            build: pnpm build --target armv7-unknown-linux-gnueabihf --use-napi-cross
          - host: [self-hosted, linux]
            target: aarch64-unknown-linux-musl
            build: pnpm build --target aarch64-unknown-linux-musl -x
          - host: [self-hosted, windows, ARM]
            target: aarch64-pc-windows-msvc
            build: pnpm build --target aarch64-pc-windows-msvc
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v5
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22
      - name: Setup MSVC Environment (Windows x64)
        if: ${{ contains(matrix.settings.host, 'windows') && !contains(matrix.settings.host, 'ARM') }}
        run: |
          if exist "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" (
            call "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x64
          ) else if exist "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" (
            call "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x64
          )
        shell: cmd
        continue-on-error: true
      - name: Setup MSVC Environment (Windows ARM64)
        if: ${{ contains(matrix.settings.host, 'ARM') }}
        run: |
          if exist "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" (
            call "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" amd64_arm64
          ) else if exist "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" (
            call "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" amd64_arm64
          )
        shell: cmd
        continue-on-error: true
      - name: Install Rust (Windows)
        if: ${{ contains(matrix.settings.host, 'windows') }}
        run: |
          curl -o rustup-init.exe https://win.rustup.rs/x86_64
          .\rustup-init.exe -y --default-toolchain stable --default-host x86_64-pc-windows-msvc
          "%USERPROFILE%\.cargo\bin\rustup.exe" target add ${{ matrix.settings.target }}
          "%USERPROFILE%\.cargo\bin\rustup.exe" component add rustfmt clippy
        shell: cmd
      - name: Install Rust (Non-Windows)
        if: ${{ !contains(matrix.settings.host, 'windows') }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - uses: mlugg/setup-zig@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        with:
          version: 0.15.1
      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild
      - name: Install dependencies
        run: pnpm install
      - name: Setup node x86
        uses: actions/setup-node@v5
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 22
          architecture: x86
      - name: Build (Windows ARM64)
        if: ${{ contains(matrix.settings.host, 'ARM') }}
        run: |
          set PATH=%PATH%;%USERPROFILE%\.cargo\bin
          echo PATH=%PATH%
          echo INCLUDE=%INCLUDE%
          echo LIB=%LIB%
          where cl.exe
          where link.exe
          ${{ matrix.settings.build }}
        shell: cmd
      - name: Build (Windows)
        if: ${{ contains(matrix.settings.host, 'windows') && !contains(matrix.settings.host, 'ARM') }}
        run: |
          set PATH=%PATH%;%USERPROFILE%\.cargo\bin
          ${{ matrix.settings.build }}
        shell: cmd
      - name: Build (Non-Windows)
        if: ${{ !contains(matrix.settings.host, 'windows') }}
        run: ${{ matrix.settings.build }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: '*.node'
          if-no-files-found: error

  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: [self-hosted, windows]
            target: x86_64-pc-windows-msvc
            architecture: x64
          - host: [self-hosted, macos]
            target: x86_64-apple-darwin
            architecture: x64
          - host: [self-hosted, macos]
            target: aarch64-apple-darwin
            architecture: arm64
        node:
          - '20'
          - '22'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v5
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node }}
          architecture: ${{ matrix.settings.architecture }}
      - name: Install dependencies
        run: pnpm install
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: pnpm test

  test-linux-binding:
    name: Test ${{ matrix.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - armv7-unknown-linux-gnueabihf
        node:
          - '20'
          - '22'
    runs-on: ${{ contains(matrix.target, 'aarch64') && 'ubuntu-24.04-arm' || 'self-hosted' }}
    steps:
      - uses: actions/checkout@v5
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node }}
      - name: Output docker params
        id: docker
        run: |
          node -e "
            if ('${{ matrix.target }}'.startsWith('aarch64')) {
              console.log('PLATFORM=linux/arm64')
            } else if ('${{ matrix.target }}'.startsWith('armv7')) {
              console.log('PLATFORM=linux/arm/v7')
            } else {
              console.log('PLATFORM=linux/amd64')
            }
          " >> $GITHUB_OUTPUT
          node -e "
            if ('${{ matrix.target }}'.endsWith('-musl')) {
              console.log('IMAGE=node:${{ matrix.node }}-alpine')
            } else {
              console.log('IMAGE=node:${{ matrix.node }}-slim')
            }
          " >> $GITHUB_OUTPUT
          echo "PNPM_STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
      - name: Install dependencies
        run: pnpm install --force
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ contains(matrix.target, 'armv7') }}
        with:
          platforms: all
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        if: ${{ contains(matrix.target, 'armv7') }}
      - name: Test bindings
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.docker.outputs.IMAGE }}
          options: -v ${{ steps.docker.outputs.PNPM_STORE_PATH }}:${{ steps.docker.outputs.PNPM_STORE_PATH }} -v ${{ github.workspace }}:${{ github.workspace }} -w ${{ github.workspace }} --platform ${{ steps.docker.outputs.PLATFORM }}
          run: npm run test

  publish:
    name: Publish
    runs-on: self-hosted
    needs:
      - lint
      - test-macOS-windows-binding
      - test-linux-binding
    steps:
      - uses: actions/checkout@v5
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22
      - name: Install dependencies
        run: pnpm install
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts
      - name: create npm dirs
        run: pnpm napi create-npm-dirs
      - name: Move artifacts
        run: pnpm artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^v\?[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
