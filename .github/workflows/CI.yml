name: CI
env:
  DEBUG: napi:*
  APP_NAME: project-detector
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  CARGO_INCREMENTAL: '1'
permissions:
  contents: write
  id-token: write
'on':
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  lint:
    name: Lint
    runs-on: [self-hosted, macos]
    steps:
      - uses: actions/checkout@v5
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: 'pnpm'

      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Install dependencies
        run: pnpm install

      - name: ESLint
        run: pnpm lint

      - name: Cargo fmt
        run: cargo fmt -- --check

      - name: Clippy
        run: cargo clippy

  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: [self-hosted, macos]
            target: x86_64-apple-darwin
            build: pnpm build --target x86_64-apple-darwin
          - host: [self-hosted, windows]
            build: pnpm build --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - host: [self-hosted, windows]
            build: pnpm build --target i686-pc-windows-msvc
            target: i686-pc-windows-msvc
          - host: [self-hosted, linux]
            target: x86_64-unknown-linux-gnu
            build: pnpm build --target x86_64-unknown-linux-gnu --use-napi-cross
          - host: [self-hosted, linux]
            target: x86_64-unknown-linux-musl
            build: pnpm build --target x86_64-unknown-linux-musl -x
          - host: [self-hosted, macos]
            target: aarch64-apple-darwin
            build: pnpm build --target aarch64-apple-darwin
          - host: [self-hosted, linux]
            target: aarch64-unknown-linux-gnu
            build: pnpm build --target aarch64-unknown-linux-gnu --use-napi-cross
          - host: [self-hosted, linux]
            target: armv7-unknown-linux-gnueabihf
            build: pnpm build --target armv7-unknown-linux-gnueabihf --use-napi-cross
          - host: [self-hosted, linux, x86]
            target: aarch64-linux-android
            build: pnpm build --target aarch64-linux-android
          - host: [self-hosted, linux, x86]
            target: armv7-linux-androideabi
            build: pnpm build --target armv7-linux-androideabi
          - host: [self-hosted, linux]
            target: aarch64-unknown-linux-musl
            build: pnpm build --target aarch64-unknown-linux-musl -x
          - host: [self-hosted, windows, ARM]
            target: aarch64-pc-windows-msvc
            build: pnpm build --target aarch64-pc-windows-msvc
          # - host: [self-hosted, linux]
          #   target: wasm32-wasip1-threads
          #   build: pnpm build --target wasm32-wasip1-threads
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v5
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml
      - name: Clear pnpm cache (if needed)
        run: |
          # Clear pnpm cache if it's corrupted or causing issues
          pnpm store prune || true
          pnpm config set store-dir ~/.pnpm-store
        continue-on-error: true
      
      - name: Verify ARM64 Environment (Windows ARM64)
        if: ${{ contains(matrix.settings.host, 'windows-arm64') }}
        run: |
          echo "Verifying ARM64 native environment..."
          echo "Architecture: %PROCESSOR_ARCHITECTURE%"
          where cl.exe
          where link.exe
          echo "ARM64 native environment verified"
        shell: cmd
        continue-on-error: true
      - name: Setup MSVC Environment (Windows x64)
        if: ${{ contains(matrix.settings.host, 'windows') }}
        run: |
          echo "Setting up MSVC environment for x64 Windows..."
          REM Try different Visual Studio paths for x64
          if exist "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" (
            echo "Found Visual Studio 2022 BuildTools"
            call "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x64
            goto :done
          )
          if exist "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" (
            echo "Found Visual Studio 2019 BuildTools"
            call "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" x64
            goto :done
          )
          echo "Visual Studio not found, trying to find vcvarsall.bat..."
          for /f "tokens=*" %%i in ('where vcvarsall.bat 2^>nul') do (
            echo "Found vcvarsall.bat at: %%i"
            call "%%i" x64
            goto :done
          )
          echo "Warning: Visual Studio Build Tools not found"
          
          :done
          echo "MSVC environment setup completed"
        shell: cmd
        continue-on-error: true
      
      - name: Setup MSVC Environment (Windows ARM64)
        if: ${{ contains(matrix.settings.host, 'windows-arm64') }}
        run: |
          echo "Setting up MSVC environment for ARM64 Windows..."
          REM Try different Visual Studio paths for ARM64
          if exist "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" (
            echo "Found Visual Studio 2022 BuildTools"
            call "C:\Program Files\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" arm64
            goto :done
          )
          if exist "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" (
            echo "Found Visual Studio 2019 BuildTools"
            call "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" arm64
            goto :done
          )
          echo "Visual Studio not found, trying to find vcvarsall.bat..."
          for /f "tokens=*" %%i in ('where vcvarsall.bat 2^>nul') do (
            echo "Found vcvarsall.bat at: %%i"
            call "%%i" arm64
            goto :done
          )
          echo "Warning: Visual Studio Build Tools not found"
          
          :done
          echo "MSVC environment setup completed"
        shell: cmd
        continue-on-error: true
      
      - name: Install Rust (Windows x64)
        if: ${{ contains(matrix.settings.host, 'windows') }}
        run: |
          echo "PROCESSOR_ARCHITECTURE: %PROCESSOR_ARCHITECTURE%"
          echo "PROCESSOR_ARCHITEW6432: %PROCESSOR_ARCHITEW6432%"
          # Use x86_64 version for x64 Windows runners
          curl -o rustup-init.exe https://win.rustup.rs/x86_64
          .\rustup-init.exe -y --default-toolchain stable --default-host x86_64-pc-windows-msvc
          echo "%USERPROFILE%\.cargo\bin" >> $env:GITHUB_PATH
          "%USERPROFILE%\.cargo\bin\rustup.exe" target add ${{ matrix.settings.target }}
          "%USERPROFILE%\.cargo\bin\rustup.exe" component add rustfmt clippy
          echo "CARGO_PATH=%USERPROFILE%\.cargo\bin" >> $env:GITHUB_ENV
        shell: cmd
      
      - name: Install Rust (Windows ARM64)
        if: ${{ contains(matrix.settings.host, 'windows-arm64') }}
        run: |
          echo "PROCESSOR_ARCHITECTURE: %PROCESSOR_ARCHITECTURE%"
          echo "PROCESSOR_ARCHITEW6432: %PROCESSOR_ARCHITEW6432%"
          # Use ARM64 version for ARM64 Windows runners
          curl -o rustup-init.exe https://win.rustup.rs/aarch64
          .\rustup-init.exe -y --default-toolchain stable --default-host aarch64-pc-windows-msvc
          echo "%USERPROFILE%\.cargo\bin" >> $env:GITHUB_PATH
          "%USERPROFILE%\.cargo\bin\rustup.exe" component add rustfmt clippy
          echo "CARGO_PATH=%USERPROFILE%\.cargo\bin" >> $env:GITHUB_ENV
        shell: cmd
      
      - name: Install Rust (Non-Windows)
        if: ${{ !contains(matrix.settings.host, 'windows') }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      # - name: Cache cargo
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       ~/.cargo/registry/index/
      #       ~/.cargo/registry/cache/
      #       ~/.cargo/git/db/
      #       ~/.napi-rs
      #       .cargo-cache
      #       target/
      #     key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}
      
      - name: Install Android NDK
        if: ${{ contains(matrix.settings.target, 'android') }}
        run: |
          echo "Installing Android NDK..."
          # Download and install Android NDK
          wget https://dl.google.com/android/repository/android-ndk-r25c-linux.zip
          unzip android-ndk-r25c-linux.zip
          NDK_ROOT="$PWD/android-ndk-r25c"
          echo "ANDROID_NDK_ROOT=$NDK_ROOT" >> $GITHUB_ENV
          echo "$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
          
          # Set up environment variables for Android targets
          if [[ "${{ matrix.settings.target }}" == "aarch64-linux-android" ]]; then
            echo "CC_aarch64_linux_android=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang" >> $GITHUB_ENV
            echo "CXX_aarch64_linux_android=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang++" >> $GITHUB_ENV
            echo "AR_aarch64_linux_android=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
            echo "TARGET_CC=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang" >> $GITHUB_ENV
            echo "TARGET_AR=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
            echo "CC_aarch64_pc_windows_msvc=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android24-clang" >> $GITHUB_ENV
            echo "AR_aarch64_pc_windows_msvc=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          elif [[ "${{ matrix.settings.target }}" == "armv7-linux-androideabi" ]]; then
            echo "CC_armv7_linux_androideabi=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi24-clang" >> $GITHUB_ENV
            echo "CXX_armv7_linux_androideabi=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi24-clang++" >> $GITHUB_ENV
            echo "AR_armv7_linux_androideabi=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
            echo "TARGET_CC=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi24-clang" >> $GITHUB_ENV
            echo "TARGET_AR=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
            echo "CC_armv7_pc_windows_msvc=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi24-clang" >> $GITHUB_ENV
            echo "AR_armv7_pc_windows_msvc=$NDK_ROOT/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" >> $GITHUB_ENV
          fi
          
          # Debug: Print environment variables
          echo "=== Environment Variables Debug ==="
          echo "Target: ${{ matrix.settings.target }}"
          echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
          echo "TARGET_CC: $TARGET_CC"
          echo "TARGET_AR: $TARGET_AR"
          if [[ "${{ matrix.settings.target }}" == "aarch64-linux-android" ]]; then
            echo "CC_aarch64_linux_android: $CC_aarch64_linux_android"
            echo "AR_aarch64_linux_android: $AR_aarch64_linux_android"
          elif [[ "${{ matrix.settings.target }}" == "armv7-linux-androideabi" ]]; then
            echo "CC_armv7_linux_androideabi: $CC_armv7_linux_androideabi"
            echo "AR_armv7_linux_androideabi: $AR_armv7_linux_androideabi"
          fi
          echo "PATH: $PATH"
          echo "=== End Debug ==="
      
      - uses: mlugg/setup-zig@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        with:
          version: 0.15.1
      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install dependencies
        run: pnpm install
      - name: Setup node x86
        uses: actions/setup-node@v5
        if: matrix.settings.target == 'i686-pc-windows-msvc'
        with:
          node-version: 22
          cache: pnpm
          architecture: x86
      - name: Verify Rust Installation (Windows)
        if: ${{ contains(matrix.settings.host, 'windows') }}
        run: |
          echo "PATH: %PATH%"
          echo "CARGO_PATH: %CARGO_PATH%"
          "%USERPROFILE%\.cargo\bin\cargo.exe" --version
          "%USERPROFILE%\.cargo\bin\rustc.exe" --version
        shell: cmd
      
      - name: Verify Android Environment (Android targets)
        if: ${{ contains(matrix.settings.target, 'android') }}
        run: |
          echo "=== Android Environment Verification ==="
          echo "Target: ${{ matrix.settings.target }}"
          echo "ANDROID_NDK_ROOT: $ANDROID_NDK_ROOT"
          echo "TARGET_CC: $TARGET_CC"
          echo "TARGET_AR: $TARGET_AR"
          if [[ "${{ matrix.settings.target }}" == "aarch64-linux-android" ]]; then
            echo "CC_aarch64_linux_android: $CC_aarch64_linux_android"
            echo "AR_aarch64_linux_android: $AR_aarch64_linux_android"
          elif [[ "${{ matrix.settings.target }}" == "armv7-linux-androideabi" ]]; then
            echo "CC_armv7_linux_androideabi: $CC_armv7_linux_androideabi"
            echo "AR_armv7_linux_androideabi: $AR_armv7_linux_androideabi"
          fi
          echo "PATH: $PATH"
          echo "=== Checking specific tools ==="
          if [ -f "$TARGET_CC" ]; then
            echo "TARGET_CC exists: $TARGET_CC"
          else
            echo "TARGET_CC NOT FOUND: $TARGET_CC"
          fi
          if [ -f "$TARGET_AR" ]; then
            echo "TARGET_AR exists: $TARGET_AR"
          else
            echo "TARGET_AR NOT FOUND: $TARGET_AR"
          fi
          echo "=== End Verification ==="
        shell: bash
      
      - name: Build (Windows)
        if: ${{ contains(matrix.settings.host, 'windows') }}
        run: |
          set PATH=%PATH%;%USERPROFILE%\.cargo\bin
          ${{ matrix.settings.build }}
        shell: cmd
      
      - name: Build (Non-Windows)
        if: ${{ !contains(matrix.settings.host, 'windows') }}
        run: ${{ matrix.settings.build }}
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: matrix.settings.target != 'wasm32-wasip1-threads'
        with:
          name: bindings-${{ matrix.settings.target }}
          path: '*.node'
          if-no-files-found: error

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: matrix.settings.target == 'wasm32-wasip1-threads'
        with:
          name: bindings-${{ matrix.settings.target }}
          path: '*.wasm'
          if-no-files-found: error
  # build-freebsd:
  #   runs-on: [self-hosted, linux]
  #   name: Build FreeBSD
  #   steps:
  #     - uses: actions/checkout@v5
  #     - name: Build FreeBSD with Docker
  #       run: |
  #         sudo docker run --rm \
  #           -v $PWD:/workspace \
  #           -w /workspace \
  #           --memory=2g \
  #           --cpus=1 \
  #           freebsd/freebsd:13.4 \
  #           bash -c "
  #             pkg install -y node npm curl
  #             npm install -g pnpm
  #             curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain stable
  #             source ~/.cargo/env
  #             echo '~~~~ rustc --version ~~~~'
  #             rustc --version
  #             echo '~~~~ node -v ~~~~'
  #             node -v
  #             echo '~~~~ pnpm --version ~~~~'
  #             pnpm --version
  #             pwd
  #             ls -lah
  #             whoami
  #             env
  #             freebsd-version
  #             pnpm install
  #             pnpm build
  #             rm -rf node_modules
  #             rm -rf target
  #           "
  #     - name: Upload artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: bindings-freebsd
  #         path: ${{ env.APP_NAME }}.*.node
  #         if-no-files-found: error
  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: [self-hosted, windows]
            target: x86_64-pc-windows-msvc
            architecture: x64
          - host: [self-hosted, macos]
            target: x86_64-apple-darwin
            architecture: x64
          - host: [self-hosted, macos]
            target: aarch64-apple-darwin
            architecture: arm64
        node:
          - '20'
          - '22'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v5
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          architecture: ${{ matrix.settings.architecture }}
      - name: Install dependencies
        run: pnpm install
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        run: pnpm test
  test-linux-binding:
    name: Test ${{ matrix.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
          - aarch64-unknown-linux-musl
          - armv7-unknown-linux-gnueabihf
        node:
          - '20'
          - '22'
    runs-on: ${{ contains(matrix.target, 'aarch64') && 'ubuntu-24.04-arm' || 'self-hosted' }}
    steps:
      - uses: actions/checkout@v5
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
      - name: Output docker params
        id: docker
        run: |
          node -e "
            if ('${{ matrix.target }}'.startsWith('aarch64')) {
              console.log('PLATFORM=linux/arm64')
            } else if ('${{ matrix.target }}'.startsWith('armv7')) {
              console.log('PLATFORM=linux/arm/v7')
            } else {
              console.log('PLATFORM=linux/amd64')
            }
          " >> $GITHUB_OUTPUT
          node -e "
            if ('${{ matrix.target }}'.endsWith('-musl')) {
              console.log('IMAGE=node:${{ matrix.node }}-alpine')
            } else {
              console.log('IMAGE=node:${{ matrix.node }}-slim')
            }
          " >> $GITHUB_OUTPUT
          echo "PNPM_STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
      # use --force to download the all platform/arch dependencies
      - name: Install dependencies
        run: pnpm install --force
      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          name: bindings-${{ matrix.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ contains(matrix.target, 'armv7') }}
        with:
          platforms: all
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        if: ${{ contains(matrix.target, 'armv7') }}
      - name: Test bindings
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.docker.outputs.IMAGE }}
          options: -v ${{ steps.docker.outputs.PNPM_STORE_PATH }}:${{ steps.docker.outputs.PNPM_STORE_PATH }} -v ${{ github.workspace }}:${{ github.workspace }} -w ${{ github.workspace }} --platform ${{ steps.docker.outputs.PLATFORM }}
          run: npm run test
  # test-wasi:
  #   name: Test WASI target
  #   needs:
  #     - build
  #   runs-on: self-hosted
  #   steps:
  #     - uses: actions/checkout@v5
  #     - name: setup pnpm
  #       uses: pnpm/action-setup@v4
  #     - name: Setup node
  #       uses: actions/setup-node@v5
  #       with:
  #         node-version: 22
  #         cache: pnpm
  #     - name: Install dependencies
  #       run: pnpm install
  #     - name: Download artifacts
  #       uses: actions/download-artifact@v5
  #       with:
  #         name: bindings-wasm32-wasip1-threads
  #         path: .
  #     - name: List packages
  #       run: ls -R .
  #       shell: bash
  #     - name: Test bindings
  #       run: pnpm test
  #       env:
  #         NAPI_RS_FORCE_WASI: 1
  publish:
    name: Publish
    runs-on: self-hosted
    needs:
      - lint
      # - build-freebsd
      - test-macOS-windows-binding
      - test-linux-binding
      # - test-wasi
    steps:
      - uses: actions/checkout@v5
      - name: setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup node
        uses: actions/setup-node@v5
        with:
          node-version: 22
          cache: pnpm
      - name: Install dependencies
        run: pnpm install
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts
      - name: create npm dirs
        run: pnpm napi create-npm-dirs
      - name: Move artifacts
        run: pnpm artifacts
      - name: List packages
        run: ls -R ./npm
        shell: bash
      - name: Publish
        run: |
          npm config set provenance true
          if git log -1 --pretty=%B | grep "^v\?[0-9]\+\.[0-9]\+\.[0-9]\+$";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --access public
          elif git log -1 --pretty=%B | grep "^v\?[0-9]\+\.[0-9]\+\.[0-9]\+";
          then
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
            npm publish --tag next --access public
          else
            echo "Not a release, skipping publish"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
