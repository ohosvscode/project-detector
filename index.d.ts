/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class ElementDirectory {
  static from(resourceDirectory: ResourceDirectory): ElementDirectory | null
  getUri(): Uri
  getResourceDirectory(): ResourceDirectory
}

export declare class ElementJsonFile {
  static create(elementDirectory: ElementDirectory, elementJsonFileUri: string): ElementJsonFile | null
  static reload(elementJsonFile: ElementJsonFile): void
  static findAll(elementDirectory: ElementDirectory): Array<ElementJsonFile>
  getUri(): Uri
  getElementDirectory(): ElementDirectory
  getContent(): string
  parse(): any
}

export declare class ElementJsonFileReference {
  static findAll(elementJsonFile: ElementJsonFile): Array<ElementJsonFileReference>
  getElementJsonFile(): ElementJsonFile
  getNameStart(): number
  getNameEnd(): number
  getValueStart(): number
  getValueEnd(): number
  getNameText(): string
  getNameFullText(): string
  getValueText(): string
  getValueFullText(): string
  getElementType(): string
  getFullElementType(): string
  toEtsFormat(): string
  toJsonFormat(): string
}

export declare class Module {
  static create(project: Project, moduleUri: string): Module | null
  static findAll(project: Project): Array<Module>
  static reload(module: Module): void
  getUri(): Uri
  getModuleName(): string
  getProject(): Project
  getParsedBuildProfile(): any
  getBuildProfileUri(): Uri
  getBuildProfileContent(): string
}

export declare class Product {
  static findAll(module: Module): Array<Product>
  getModule(): Module
  getName(): string
  getCurrentTargetConfig(): any
  getSourceDirectories(): Array<Uri>
  getCurrentTargetDirectory(): Uri
  getModuleJson5Path(): Uri
  getConfigJsonPath(): Uri
  getResourceDirectories(): Array<Uri>
}

export declare class Project {
  getProjectDetector(): ProjectDetector
  static findAll(projectDetector: ProjectDetector): Array<Project>
  static create(projectDetector: ProjectDetector, projectUri: string): Project | null
  static reload(project: Project): void
  getUri(): Uri
  getParsedBuildProfile(): any
  getBuildProfileUri(): Uri
  getBuildProfileContent(): string
}

export declare class ProjectDetector {
  static create(workspaceFolder: string): ProjectDetector
  getWorkspaceFolder(): Uri
}

export declare class QualifierUtils {
  /** * Check if the mcc is a valid MCC code with value.
   */
  static isMcc(mcc: number): boolean
  /** * Check if the mcc is a valid MCC code with string `mcc`.
   * For example: "mcc310" => true, "mcc3100" => false
   */
  static isMccCode(mcc: string): boolean
  /** * Check if the language code is a valid language code.
   * For example: "en" => true, "en-US" => false
   */
  static isLanguageCode(languageCode: string): boolean
  /** * Check if the device type is a valid device type.
   * - phone
   * - tablet
   * - tv
   * - car
   * - wearable
   * - 2in1
   */
  static isDeviceType(deviceType: string): boolean
  /** * Check if the color mode is a valid color mode.
   * - dark
   * - light
   */
  static isColorMode(colorMode: string): boolean
  /** * Check if the mnc is a valid MNC code with value.
   */
  static isMnc(mnc: number, mcc: number): boolean
  /** * Check if the mnc is a valid MNC code with string `mnc` and `mcc`.
   * For example: "mnc00" => true, "mnc000" => false
   */
  static isMncCode(mnc: string, mcc: number): boolean
  /** * Check if the region code is a valid region code.
   * For example: "CN" => true, "US" => true, "AAA" => false
   */
  static isRegionCode(regionCode: string): boolean
  /** * Check if the orientation is a valid orientation.
   * - vertical
   * - horizontal
   */
  static isOrientation(orientation: string): boolean
  /** * Check if the screen density is a valid screen density.
   * - sdpi
   * - mdpi
   * - ldpi
   * - xldpi
   * - xxldpi
   * - xxxldpi
   */
  static isScreenDensity(screenDensity: string): boolean
  /** * Analyze the qualifier and return the qualifier list.
   *
   * 限定词目录由一个或多个表征应用场景或设备特征的限定词组合而成，限定词包括移动国家码和移动网络码、语言、文字、国家或地区、横竖屏、设备类型、颜色模式和屏幕密度，限定词之间通过下划线（_）或者中划线（-）连接。开发者在创建限定词目录时，需要遵守如下限定词目录命名规则。
   * 限定词的组合顺序：移动国家码_移动网络码-语言_文字_国家或地区-横竖屏-设备类型-颜色模式-屏幕密度。开发者可以根据应用的使用场景和设备特征，选择其中的一类或几类限定词组成目录名称。
   * 限定词的连接方式：移动国家码和移动网络码之间采用下划线（_）连接，语言、文字、国家或地区之间也采用下划线（_）连接，除此之外的其他限定词之间均采用中划线（-）连接。例如：`mcc460_mnc00-zh_Hant_CN`、`zh_CN-car-ldpi`。
   * 限定词的取值范围：每类限定词的取值必须符合限定词取值要求表中的条件，如表5。否则，将无法匹配目录中的资源文件。
   *
   * **注意**：如果任何一个限定词无法识别或顺序错误，将返回空向量，表示整个限定词字符串无效。
   */
  static analyzeQualifier(qualifiers: string): Array<Qualifier>
}

export declare class Resource {
  static findAll(product: Product): Array<Resource>
  static create(product: Product, resourceUri: string): Resource | null
  getProduct(): Product
  getUri(): Uri
}

export declare class ResourceDirectory {
  static findAll(resource: Resource): Array<ResourceDirectory>
  static create(resource: Resource, resourceDirectoryUri: string): ResourceDirectory | null
  getUri(): Uri
  getResource(): Resource
  getQualifiers(): Array<Qualifier> | 'base' | 'rawfile' | 'resfile'
}

export declare class Uri {
  static file(path: string): Uri
  static parse(url: string): Uri
  static basename(uri: Uri): string
  static dirname(uri: Uri): Uri
  isEqual(other: Uri): boolean
  get fsPath(): string
  get path(): string
  get scheme(): string
  get host(): string
  get query(): string
  get fragment(): string
  get username(): string
  get password(): string
  get port(): number
  toString(): string
}

export interface Qualifier {
  /** * The type of the qualifier.
   */
  qualifierType: QualifierType
  /** * The value of the qualifier.
   */
  qualifierValue: string
}

export declare const enum QualifierType {
  MCC = 'MCC',
  MNC = 'MNC',
  RegionCode = 'RegionCode',
  Orientation = 'Orientation',
  ScreenDensity = 'ScreenDensity',
  ColorMode = 'ColorMode',
  LanguageCode = 'LanguageCode',
  DeviceType = 'DeviceType'
}
