/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class ElementJsonFile {
  content: string
  static create(uri: string): ElementJsonFile | null
  getUri(): string
}

export declare class ElementJsonFileNameReference {
  getStart(): number
  getEnd(): number
  getText(): string
  static create(start: number, end: number, text: string, elementJsonFile: ElementJsonFile): ElementJsonFileNameReference
  getElementJsonFile(): ElementJsonFile
  static findAll(elementJsonFile: ElementJsonFile): Array<ElementJsonFileNameReference>
}

/** * Single {@linkcode Workspace} contains multiple modules.
 *
 * As a basic functional unit of apps/atomic services, a module contains source
 * code, resource files, third-party libraries, and configuration files.
 *
 * It must contain the `build-profile.json5` and `oh-package.json5` files at the
 * project level, so the current module implementation provides
 * {@linkcode getProjectBuildProfile} and {@linkcode getProjectOhPackage} methods
 * to get their related information.
 *
 * @see https://developer.huawei.com/consumer/en/doc/harmonyos-guides/ide-hvigor-multi-module
 *
 * ---
 * 一个工作空间包含多个模块。
 *
 * 作为应用/原子服务的最小功能单元，模块包含源代码、资源文件、第三方库和配置文件。
 *
 * 它首先必须包含有工程级的`build-profile.json5` 和`oh-package.json5`文件，因
 * 此在当前模块实现中提供{@linkcode getProjectBuildProfile} 和 {@linkcode getProjectOhPackage}
 * 方法来获取它们的相关信息。
 *
 *
 * @see https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor-multi-module
 */
export declare class Module {
  /** * Get the module uri.
   *
   * @returns The module uri.
   */
  getUri(): string
  /** * Create a new module.
   *
   * @param project - The project.
   * @param directory_uri - The directory URI, must be a valid URL like `file://`.
   * @returns The module.
   */
  static create(project: Project, directoryUri: string): Module | null
  /** * Find all modules.
   *
   * @param project - The project.
   * @returns The modules.
   */
  static findAll(project: Project): Array<Module>
  /** * Get the project.
   *
   * @returns The project.
   */
  getProject(): Project
  getBuildProfilePath(): string
  getParsedBuildProfileContent(): unknown
  getBuildProfileContent(): string
}

/** * Single {@linkcode Module} contain multiple products.
 *
 * Usually, application vendors
 * will customize the same application for different versions based on different
 * deployment environments, different target audiences, different runtime environments, etc.,
 * such as domestic version, international version, normal version, VIP version,
 * free version, paid version, etc. For the above scenarios supports the use of a small
 * amount of code configuration to instantiate different versions of differences,
 * and achieve the high reuse of source code and resource files through different target
 * product versions during the compilation and build process.
 *
 * @see https://developer.huawei.com/consumer/en/doc/harmonyos-guides/ide-customized-multi-targets-and-products-guides#section1011341611469
 *
 * ---
 * 一个 {@linkcode Module} 包含多个product。
 *
 * 通常情况下，应用厂商会根据不同的部署环境，不同的目标人群，不同的运行环境等，
 * 将同一个应用定制为不同的版本，如国内版、国际版、普通版、VIP版、免费版、付费版等。
 * 针对以上场景支持通过少量的代码配置以实例化不同的差异版本，在编译构建过程中实现
 * 一个应用构建出不同的目标产物版本，从而实现源代码、资源文件等的高效复用。
 *
 * @see https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-customized-multi-targets-and-products-guides#section1011341611469
 */
export declare class Product {
  /** * Get the product directory uri.
   *
   * @returns The product directory uri.
   */
  getUri(): string
  static create(module: Module, directoryUri: string, targetName: string): Product | undefined
  /** * Get parent module.
   */
  getModule(): Module
  /** * Get `module.json5` content.
   */
  getModuleJson5Content(): string
  /** * Get parsed `module.json5` content.
   */
  getParsedModuleJson5Content(): unknown
  /** * Get current product directory name.
   */
  getDirectoryName(): string
  /** * Find all products.
   */
  static findAll(module: Module): Array<Product>
  getTargetName(): string
  /** * Get resource directories from model level `build-profile.json5` file.
   *
   * If the resource directories is not set will return the default resource directories like:
   *
   * - If the target is `default`, the result path is `src/main/resources`
   * - If the target is `foo`, the result path is `src/foo/resources`
   */
  getResourceDirectories(): Array<string>
}

/** * {@linkcode Workspace} represents a `hvigor` project.
 *
 * Hvigor is a build task orchestration tool based on TypeScript, which mainly
 * provides task management mechanisms, including task registration orchestration,
 * project model management, configuration management, and provides specific
 * processes and configurable settings for building and testing applications.
 *
 * @see https://developer.huawei.com/consumer/en/doc/harmonyos-guides/ide-hvigor
 *
 * ---
 *
 * {@linkcode Workspace} 代表一个`hvigor`工程。
 *
 * 编译构建工具 Hvigor 是一款基于TypeScript实现的构建任务编排工具，主要提供任务
 * 管理机制，包括任务注册编排、工程模型管理、配置管理等关键能力，提供专用于构建
 * 和测试应用的流程和可配置设置。
 *
 * @see https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/ide-hvigor
 */
export declare class Project {
  /** * Get the project uri.
   *
   * @returns The project uri.
   */
  getUri(): string
  /** * Create a new project.
   *
   * @param project_detector - The project detector.
   * @param directory_uri - The directory URI, must be a valid URL like `file://`.
   * @returns The project.
   */
  static create(projectDetector: ProjectDetector, directoryUri: string): Project | undefined
  /** * Get the workspace-level `build-profile.json5` content.
   *
   * @returns The workspace-level `build-profile.json5` content.
   */
  getBuildProfileContent(): string
  /** * Get the parsed workspace-level `build-profile.json5` content.
   *
   * @returns The parsed workspace-level `build-profile.json5` content.
   */
  getParsedBuildProfileContent(): unknown
  /** * Get the project detector.
   *
   * @param env - The environment.
   * @returns The project detector.
   */
  getProjectDetector(): ProjectDetector
  /** * Find all projects.
   *
   * @param env - The environment.
   * @param project_detector - The project detector.
   * @returns The projects.
   */
  static findAll(projectDetector: ProjectDetector): Array<Project>
}

export declare class ProjectDetector {
  /** * Create a new project detector.
   *
   * @param workspace_folder - The workspace folder path, must be a valid URL like `file://`.
   * @returns The project detector.
   */
  static create(workspaceFolder: string): ProjectDetector
  /** * Get the workspace folder.
   *
   * @returns The workspace folder.
   */
  getWorkspaceFolder(): string
}

export declare class Resource {
  getUri(): string
  static create(product: Product, directoryUri: string): Resource | null
  getProduct(): Product
  static findAll(product: Product): Array<Resource>
  /** * Get qualified directories.
   *
   * @returns The qualified directories uris.
   */
  getQualifiedDirectories(): Array<ResourceQualifiedDirectory>
}

export declare class ResourceGroup {
  getUri(): string
  static findAll(resources: Array<Resource>): Array<ResourceGroup>
  isBase(): boolean
  getElementJsonFiles(): Array<ElementJsonFile>
}

export declare class Utils {
  /** * Check if the mcc is a valid MCC code with value.
   */
  static isMcc(mcc: number): boolean
  /** * Check if the mcc is a valid MCC code with string `mcc`.
   * For example: "mcc310" => true, "mcc3100" => false
   */
  static isMccCode(mcc: string): boolean
  /** * Check if the language code is a valid language code.
   * For example: "en" => true, "en-US" => false
   */
  static isLanguageCode(languageCode: string): boolean
  /** * Check if the device type is a valid device type.
   * - phone
   * - tablet
   * - tv
   * - car
   * - wearable
   * - 2in1
   */
  static isDeviceType(deviceType: string): boolean
  /** * Check if the color mode is a valid color mode.
   * - dark
   * - light
   */
  static isColorMode(colorMode: string): boolean
  /** * Check if the mnc is a valid MNC code with value.
   */
  static isMnc(mnc: number, mcc: number): boolean
  /** * Check if the mnc is a valid MNC code with string `mnc` and `mcc`.
   * For example: "mnc00" => true, "mnc000" => false
   */
  static isMncCode(mnc: string, mcc: number): boolean
  /** * Check if the region code is a valid region code.
   * For example: "CN" => true, "US" => true, "AAA" => false
   */
  static isRegionCode(regionCode: string): boolean
  /** * Check if the orientation is a valid orientation.
   * - vertical
   * - horizontal
   */
  static isOrientation(orientation: string): boolean
  /** * Check if the screen density is a valid screen density.
   * - sdpi
   * - mdpi
   * - ldpi
   * - xldpi
   * - xxldpi
   * - xxxldpi
   */
  static isScreenDensity(screenDensity: string): boolean
  /** * Analyze the qualifier and return the qualifier list.
   *
   * 限定词目录由一个或多个表征应用场景或设备特征的限定词组合而成，限定词包括移动国家码和移动网络码、语言、文字、国家或地区、横竖屏、设备类型、颜色模式和屏幕密度，限定词之间通过下划线（_）或者中划线（-）连接。开发者在创建限定词目录时，需要遵守如下限定词目录命名规则。
   * 限定词的组合顺序：移动国家码_移动网络码-语言_文字_国家或地区-横竖屏-设备类型-颜色模式-屏幕密度。开发者可以根据应用的使用场景和设备特征，选择其中的一类或几类限定词组成目录名称。
   * 限定词的连接方式：移动国家码和移动网络码之间采用下划线（_）连接，语言、文字、国家或地区之间也采用下划线（_）连接，除此之外的其他限定词之间均采用中划线（-）连接。例如：`mcc460_mnc00-zh_Hant_CN`、`zh_CN-car-ldpi`。
   * 限定词的取值范围：每类限定词的取值必须符合限定词取值要求表中的条件，如表5。否则，将无法匹配目录中的资源文件。
   *
   * **注意**：如果任何一个限定词无法识别或顺序错误，将返回空向量，表示整个限定词字符串无效。
   */
  static analyzeQualifier(qualifiers: string): Array<Qualifier>
}

export interface Qualifier {
  /** * The type of the qualifier.
   */
  qualifierType: QualifierType
  /** * The value of the qualifier.
   */
  qualifierValue: string
}

export declare const enum QualifierType {
  MCC = 0,
  MNC = 1,
  RegionCode = 2,
  Orientation = 3,
  ScreenDensity = 4,
  ColorMode = 5,
  LanguageCode = 6,
  DeviceType = 7
}

export interface ResourceQualifiedDirectory {
  uri: string
  qualifiers: Array<Qualifier>
  directoryType: ResourceQualifiedDirectoryType
}

export declare const enum ResourceQualifiedDirectoryType {
  RawFile = 0,
  ResFile = 1,
  Base = 2,
  Qualified = 3
}
